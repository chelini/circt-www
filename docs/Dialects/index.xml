<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dialects on CIRCT</title><link>https://circt.llvm.org/docs/Dialects/</link><description>Recent content in Dialects on CIRCT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://circt.llvm.org/docs/Dialects/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://circt.llvm.org/docs/Dialects/FIRRTLAttributes/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/FIRRTLAttributes/</guid><description>AugmentedBooleanTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedBundleTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedDeletedTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedDoubleTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedGroundTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedIntegerTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedLiteralTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedStringTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr AugmentedVectorTypeAttr Parameters: Parameter C++ type Description underlying DictionaryAttr InvalidValueAttr A constant value of firrtl.</description></item><item><title>'builtin' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Handshake/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Handshake/</guid><description>A dialect containing the builtin Attributes, Operations, and Types
Type constraint definition bfloat16 floating-point type Complex number with a parameterized element type 128-bit floating-point type 16-bit floating-point type 32-bit floating-point type 64-bit floating-point type 80-bit floating-point type Map from a list of inputs to a list of results Integer-like type with unknown platform-dependent bit width Integer type with arbitrary precision up to a fixed limit Shaped reference to a region of memory A unit type Type of a non-registered dialect Multi-dimensional array with a fixed number of dimensions Fixed-sized collection of other types Shaped reference, with unknown rank, to a region of memory Multi-dimensional array with unknown dimensions Multi-dimensional SIMD vector type Type definition BFloat16Type ComplexType Float128Type Float16Type Float32Type Float64Type Float80Type FunctionType IndexType IntegerType MemRefType NoneType OpaqueType RankedTensorType TupleType UnrankedMemRefType UnrankedTensorType VectorType Attribute constraint definition BufferOp seq or fifo Attribute definition BufferTypeEnumAttr Operation definition handshake.</description></item><item><title>'calyx' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Calyx/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Calyx/</guid><description>Types and operations for the Calyx dialect Calyx is an intermediate language and infrastructure for building compilers that generate custom hardware accelerators. For more information, visit the documentation.
Operation definition calyx.std_add (::circt::calyx::AddLibOp) calyx.std_and (::circt::calyx::AndLibOp) calyx.assign (::circt::calyx::AssignOp) calyx.comb_group (::circt::calyx::CombGroupOp) calyx.component (::circt::calyx::ComponentOp) calyx.control (::circt::calyx::ControlOp) calyx.std_div_pipe (::circt::calyx::DivPipeLibOp) calyx.enable (::circt::calyx::EnableOp) calyx.std_eq (::circt::calyx::EqLibOp) calyx.std_ge (::circt::calyx::GeLibOp) calyx.group_done (::circt::calyx::GroupDoneOp) calyx.group_go (::circt::calyx::GroupGoOp) calyx.group (::circt::calyx::GroupOp) calyx.std_gt (::circt::calyx::GtLibOp) calyx.if (::circt::calyx::IfOp) calyx.instance (::circt::calyx::InstanceOp) calyx.std_le (::circt::calyx::LeLibOp) calyx.std_lsh (::circt::calyx::LshLibOp) calyx.std_lt (::circt::calyx::LtLibOp) calyx.</description></item><item><title>'chirrtl' Dialect</title><link>https://circt.llvm.org/docs/Dialects/CHIRRTL/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/CHIRRTL/</guid><description>Types and operations for the chirrtl dialect This dialect defines the chirrtl dialect, which contains high-level memory defintions which can be lowered to FIRRTL.
Type constraint definition a behavioral memory port a behavioral memory Operation definition chirrtl.combmem (::circt::chirrtl::CombMemOp) chirrtl.memoryport.access (::circt::chirrtl::MemoryPortAccessOp) chirrtl.memoryport (::circt::chirrtl::MemoryPortOp) chirrtl.seqmem (::circt::chirrtl::SeqMemOp) Type definition CMemoryPortType CMemoryType Attribute constraint definition A constant value of firrtl.</description></item><item><title>'comb' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Comb/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Comb/</guid><description>Types and operations for comb dialect This dialect defines the comb dialect, which is intended to be a generic representation of combinational logic outside of a particular use-case.
Operation definition comb.add (::circt::comb::AddOp) comb.and (::circt::comb::AndOp) comb.concat (::circt::comb::ConcatOp) comb.divs (::circt::comb::DivSOp) comb.divu (::circt::comb::DivUOp) comb.extract (::circt::comb::ExtractOp) comb.icmp (::circt::comb::ICmpOp) comb.mods (::circt::comb::ModSOp) comb.modu (::circt::comb::ModUOp) comb.mul (::circt::comb::MulOp) comb.mux (::circt::comb::MuxOp) comb.or (::circt::comb::OrOp) comb.parity (::circt::comb::ParityOp) comb.replicate (::circt::comb::ReplicateOp) comb.shl (::circt::comb::ShlOp) comb.shrs (::circt::comb::ShrSOp) comb.shru (::circt::comb::ShrUOp) comb.sub (::circt::comb::SubOp) comb.xor (::circt::comb::XorOp) Type constraint definition an ArrayType an integer bitvector of one or more bits a type without inout a known primitive element InOutType a StructType a UnionType Operation definition comb.</description></item><item><title>'esi' Dialect</title><link>https://circt.llvm.org/docs/Dialects/ESI/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/ESI/</guid><description>Type constraint definition An ESI-compatible channel port Operation definition esi.decode.capnp (::circt::esi::CapnpDecode) esi.encode.capnp (::circt::esi::CapnpEncode) esi.buffer (::circt::esi::ChannelBuffer) esi.cosim (::circt::esi::CosimEndpoint) esi.null (::circt::esi::NullSourceOp) esi.stage (::circt::esi::PipelineStage) esi.unwrap.iface (::circt::esi::UnwrapSVInterface) esi.unwrap.vr (::circt::esi::UnwrapValidReady) esi.wrap.iface (::circt::esi::WrapSVInterface) esi.wrap.vr (::circt::esi::WrapValidReady) Type definition ChannelPort Type constraint definition An ESI-compatible channel port An ESI port kind which models a latency-insensitive, unidirectional, point-to-point data stream. Channels are typed (like all of ESI). Said type can be any MLIR type, but must be lowered to something a backend knows how to output (i.</description></item><item><title>'firrtl' Dialect</title><link>https://circt.llvm.org/docs/Dialects/FIRRTL/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/FIRRTL/</guid><description>Types and operations for firrtl dialect This dialect defines the firrtl dialect, which is used to lower from Chisel code to Verilog. For more information, see the FIRRTL GitHub page.
Attribute constraint definition A constant value of firrtl.invalid type module or instance parameter definition An Annotation that targets part of what it&amp;rsquo;s attached to Attribute definition AugmentedBooleanTypeAttr AugmentedBundleTypeAttr AugmentedDeletedTypeAttr AugmentedDoubleTypeAttr AugmentedGroundTypeAttr AugmentedIntegerTypeAttr AugmentedLiteralTypeAttr AugmentedStringTypeAttr AugmentedVectorTypeAttr InvalidValueAttr ParamDeclAttr SubAnnotationAttr Type constraint definition analog type a passive type that does not contain analog Reset AsyncReset BundleType clock FIRRTLType FVectorType sint or uint type UInt, SInt, or Analog a passive type (contain no flips) Reset sint type a sized type (contains no unifered widths) UInt or UInt uint type Operation definition firrtl.</description></item><item><title>'fsm' Dialect</title><link>https://circt.llvm.org/docs/Dialects/FSM/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/FSM/</guid><description>Types and operations for FSM dialect This dialect defines the fsm dialect, which is intended to represent finite-state machines.
Type constraint definition An FSM instance type Operation definition fsm.hw_instance (::circt::fsm::HWInstanceOp) fsm.instance (::circt::fsm::InstanceOp) fsm.machine (::circt::fsm::MachineOp) fsm.output (::circt::fsm::OutputOp) fsm.return (::circt::fsm::ReturnOp) fsm.state (::circt::fsm::StateOp) fsm.transition (::circt::fsm::TransitionOp) fsm.trigger (::circt::fsm::TriggerOp) fsm.update (::circt::fsm::UpdateOp) fsm.variable (::circt::fsm::VariableOp) Type definition InstanceType Type constraint definition An FSM instance type Represents an FSM instance.</description></item><item><title>'hw' Dialect</title><link>https://circt.llvm.org/docs/Dialects/HW/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/HW/</guid><description>Types and operations for the hardware dialect This dialect defines the hw dialect, which is intended to be a generic representation of HW outside of a particular use-case.
Attribute constraint definition Ouput filelist attribute Refer to a non-local symbol Refer to a name inside a module Ouput file attribute module or instance parameter definition Is a reference to a parameter value. Parameter expression combining operands Represents text to emit directly to SystemVerilog for a parameter Attribute definition FileListAttr GlobalRefAttr InnerRefAttr OutputFileAttr ParamDeclAttr ParamDeclRefAttr ParamExprAttr ParamVerbatimAttr Type constraint definition an ArrayType fixed-sized array an integer bitvector of one or more bits a type without inout a known primitive element InOutType inout type parameterized-width integer a StructType HW struct type An symbolic reference to a type declaration a UnionType An untagged union of types SystemVerilog &amp;lsquo;unpacked&amp;rsquo; fixed-sized array Operation definition hw.</description></item><item><title>'hw' Dialect</title><link>https://circt.llvm.org/docs/Dialects/LLHD/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/LLHD/</guid><description>Types and operations for the hardware dialect This dialect defines the hw dialect, which is intended to be a generic representation of HW outside of a particular use-case.
Type constraint definition an ArrayType an integer bitvector of one or more bits a type without inout a known primitive element InOutType a StructType a UnionType Attribute constraint definition time attribute Attribute definition TimeAttr Type constraint definition LLHD time type pointer type signal type time type Operation definition llhd.</description></item><item><title>'hw' Dialect</title><link>https://circt.llvm.org/docs/Dialects/MSFT/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/MSFT/</guid><description>Types and operations for the hardware dialect This dialect defines the hw dialect, which is intended to be a generic representation of HW outside of a particular use-case.
Type constraint definition an ArrayType an integer bitvector of one or more bits a type without inout a known primitive element InOutType an array of arrays a StructType a UnionType Attribute constraint definition Descibes a physical location on a device Describes a rectangle bounding a physical region on a device Attribute definition PhysLocationAttr PhysicalBoundsAttr Operation definition msft.</description></item><item><title>'hw' Dialect</title><link>https://circt.llvm.org/docs/Dialects/SV/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/SV/</guid><description>Types and operations for the hardware dialect This dialect defines the hw dialect, which is intended to be a generic representation of HW outside of a particular use-case.
Attribute constraint definition Refer to a non-local symbol Refer to a name inside a module Attribute definition GlobalRefAttr InnerRefAttr Type constraint definition an ArrayType an integer bitvector of one or more bits a type without inout a known primitive element InOutType a StructType a UnionType Attribute constraint definition Represents a reference to a macro identifier Defines direction in a modport validation qualifier type Attribute definition MacroIdentAttr ModportDirectionAttr ValidationQualifierTypeEnumAttr Type constraint definition SystemVerilog interface type pointing to an InterfaceOp SystemVerilog type pointing to an InterfaceModportOp Operation definition sv.</description></item><item><title>'moore' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Moore/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Moore/</guid><description>Types and operations for Moore dialect This dialect defines the moore dialect, which represents various SystemVerilog-specific constructs without ambiguities and all types resolved.
Type constraint definition an SystemVerilog int packed type simple bit vector type unpacked type Operation definition moore.mir.assign (::circt::moore::AssignOp) moore.mir.concat (::circt::moore::ConcatOp) moore.mir.constant (::circt::moore::ConstantOp) moore.mir.shl (::circt::moore::ShlOp) moore.mir.shr (::circt::moore::ShrOp) moore.mir.vardecl (::circt::moore::VariableDeclOp) Type definition LValueType Type constraint definition an SystemVerilog int packed type simple bit vector type unpacked type Operation definition moore.</description></item><item><title>'seq' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Seq/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Seq/</guid><description>Types and operations for seq dialect The seq dialect is intended to model digital sequential logic.
Operation definition seq.compreg (::circt::seq::CompRegOp) Operation definition seq.compreg (::circt::seq::CompRegOp) Register a value, storing it for one cycle
See the Seq dialect rationale for a longer description Traits: SameVariadicOperandSize
Interfaces: NoSideEffect (MemoryEffectOpInterface), OpAsmOpInterface
Effects: MemoryEffects::Effect{}
Attributes: Attribute MLIR Type Description name ::mlir::StringAttr string attribute sym_name ::mlir::StringAttr string attribute Operands: Operand Description input any type clk 1-bit signless integer reset 1-bit signless integer resetValue any type Results: Result Description data any type</description></item><item><title>'staticlogic' Dialect</title><link>https://circt.llvm.org/docs/Dialects/StaticLogic/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/StaticLogic/</guid><description>Operation definition staticlogic.pipeline (::circt::staticlogic::PipelineOp) staticlogic.pipeline.register (::circt::staticlogic::PipelineRegisterOp) staticlogic.pipeline.stage (::circt::staticlogic::PipelineStageOp) staticlogic.pipeline.terminator (::circt::staticlogic::PipelineTerminatorOp) staticlogic.pipeline.while (::circt::staticlogic::PipelineWhileOp) staticlogic.return (::circt::staticlogic::ReturnOp) Operation definition staticlogic.pipeline (::circt::staticlogic::PipelineOp) pipeline operation
The &amp;ldquo;staticlogic.pipeline&amp;rdquo; operation represents a statically scheduled pipeline stucture which contains several MLIR blocks. Each MLIR block is corresponding to a pipeline stage.
Interfaces: NoSideEffect (MemoryEffectOpInterface)
Effects: MemoryEffects::Effect{}
Operands: Operand Description «unnamed» any type Results: Result Description «unnamed» any type staticlogic.</description></item></channel></rss>